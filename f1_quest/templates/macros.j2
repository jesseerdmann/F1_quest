{% macro render_table(base_url, table) %}
<table class="table">
    <h5>{{ table.name }}</h5>
    <thead>
        <tr>
            <th scope="col">Position</th>
            <th scope="col">{{ table.subject_label }}</th>
            <th scope="col">{{ table.score_label }}</th>
            {% if table.show_values %}
            <th scope="col">{{ table.value_label }}</th>
            {% endif %}
            {% if table.show_entries %}
            <th scope="col">{{ table.entry_label }}</th>
            {% endif %}
        </tr>
    </thead>
    <tbody>
        {% for table_row in table.get_ordered_subjects() %}
        <tr class="{{ loop.cycle('table-light', 'table-secondary') }}">
            <th scope="row">
            {% if loop.first or loop.previtem.pos != table_row.pos %}
            {{ table_row.pos }}
            {% endif %}
            </th>
            {% if table.subject_label == 'Driver' %}
            <td><a class="text-danger" href="{{ driver_url(base_url, table_row.subject|string) }}">{{ table_row.subject|string }}</a></td>
            {% elif table.subject_label == 'Entry' %}
            <td><a class="text-danger" href="{{ entry_url(base_url, table_row.subject|string) }}">{{ table_row.subject|string }}</a></td>
            {% elif table.subject_label == 'Race' %}
            <td><a class="text-danger" href="{{ race_url(base_url, table_row.subject|string) }}">{{ table_row.subject|string }}</a></td>
            {% elif table.subject_label == 'Team' %}
            <td><a class="text-danger" href="{{ team_url(base_url, table_row.subject|string) }}">{{ table_row.subject|string }}</a></td>
            {% endif %}
            <td>{{ table_row.score }}</td>
            {% if table.show_values %}
            <td scope="col">{{ table_row.value }}</td>
            {% endif %}
            {% if table.show_entries %}
            <td scope="col">
            {% for entry in table_row.matching_entries %}
            <a class="text-danger" href="{{ entry_url(base_url, entry|string) }}">{{ entry }}</a>{% if not loop.last %}, {% endif %}
            {% if table.tie_breaker_var is not none %}
            (TB: {{ entry.__dict__[table.tie_breaker_var]}})
            {% endif %}
            {% endfor %}
            </td>
            {% endif %}
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endmacro %}

{% macro entry_url(base_url, entry_name) -%}
    {{ base_url }}/entries/{{ entry_name.replace(' ', '_') }}.html
{%- endmacro %}

{% macro result_url(base_url, result_name) -%}
    {{ base_url }}/results/{{ result_name.replace(':', '').replace(' ', '_') }}.html
{%- endmacro %}

{% macro driver_url(base_url, driver_name) -%}
    {{ base_url }}/drivers/{{ driver_name.replace(', ', '_').replace(' ', '_') }}.html
{%- endmacro %}

{% macro team_url(base_url, team_name) -%}
    {{ base_url }}/teams/{{ team_name.replace(' ', '_') }}.html
{%- endmacro %}

{% macro race_url(base_url, race_string) -%}
    {{ base_url }}/races/{{ race_string.replace(' @ ', '_').replace(':', '_').replace('/', '_').replace(' ', '_') }}.html
{%- endmacro %}

{% macro results_plot(race_list, series_list, results_table) -%}
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <div id="chart"></div>
    <script>
        var data = {
            series: {{ series_list }},
            races: {{ race_list }},
            results_table: {{ results_table }}
        }

        var margin = {top: 20, right: 20, bottom: 30, left: 30};
        var width = 800 - margin.left - margin.right;
        var height = 600 - margin.top - margin.bottom;

        var svg = d3.select("#chart")
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            
        var x = d3.scalePoint()
            .domain(data.races)
            .range([margin.left, width - margin.right]);
        svg.append("g")
            .attr("transform", `translate(0, ${height - margin.bottom})`)
            .call(d3.axisBottom(x));
        var y = d3.scaleLinear()
            .domain([d3.min(data.series, d => d3.min(d.values)), d3.max(data.series, d => d3.max(d.values))]).nice()
            .range([height - margin.bottom, margin.top]);
        svg.append("g")
            .call(d3.axisLeft(y))
            .call(g => g.select(".tick:last-of-type text").clone()
                .attr("x", 3)
                .attr("text-anchor", "start")
                .attr("font-weight", "bold")
                .text("Points")
            );
        
        for (array in data.series) {
            console.log(data.series[array].name);
            console.log(data.series[array].values);
            for (d in data.series[array].values) {
                console.log("-> x: " + data.series[array].values[d].x + ", y: " + data.series[array].values[d].y);
            }
        
            svg.append("path")
                .datum(data.series[array].values)
                .attr("fill", "none")
                .attr("stroke", "red")
                .attr("stroke-width", 1.5)
                .attr("d", d3.line()
                    .x(function(d) { return x(d.x) })
                    .y(function(d) { return y(d.y) })
                );
        }
    </script>
{%- endmacro %}